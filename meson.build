project(
  'Devhelp', 'c',
  version: '3.26.0',
  license: 'GPL2+',
  default_options: 'buildtype=debugoptimized',
  meson_version: '>= 0.43.0'
)

devhelp_name = meson.project_name().to_lower()

devhelp_version = meson.project_version()
version_array = devhelp_version.split('.')
devhelp_major_version = version_array[0].to_int()
devhelp_minor_version = version_array[1].to_int()
devhelp_micro_version = version_array[2].to_int()

devhelp_api_version = '@0@.0'.format(devhelp_major_version)
devhelp_api_name = '@0@-@1@'.format(devhelp_name, devhelp_api_version)

devhelp_gir_version = '1.0'

devhelp_prefix = get_option('prefix')
devhelp_bindir = join_paths(devhelp_prefix, get_option('bindir'))
devhelp_datadir = join_paths(devhelp_prefix, get_option('datadir'))
devhelp_includedir = join_paths(devhelp_prefix, get_option('includedir'))
devhelp_libdir = join_paths(devhelp_prefix, get_option('libdir'))
devhelp_libexecdir = join_paths(devhelp_prefix, get_option('libexecdir'))
devhelp_localedir = join_paths(devhelp_prefix, get_option('localedir'))
devhelp_mandir = join_paths(devhelp_prefix, get_option('mandir'))

devhelp_pkgdatadir = join_paths(devhelp_datadir, devhelp_name)
devhelp_pkgincludedir = join_paths(devhelp_includedir, devhelp_api_name)

# LT Version numbers, remember to change them just *before* a release.
# A good time to update it is for the GNOME x.y.90 version, at API freeze,
# so that packagers have the time to update the package.
#   (Interfaces removed:    CURRENT++, AGE=0, REVISION=0)
#   (Interfaces added:      CURRENT++, AGE++, REVISION=0)
#   (No interfaces changed:                   REVISION++)
libdevhelp_current = 4
libdevhelp_revision = 0
libdevhelp_age = 0
libdevhelp_version = '@0@.@1@.@2@'.format(libdevhelp_current, libdevhelp_revision, libdevhelp_age)

libdevhelp_name = '@0@-@1@'.format(devhelp_name, devhelp_major_version)

# package
package = devhelp_name
package_bugreport = 'http://bugzilla.gnome.org/enter_bug.cgi?product=' + meson.project_name()
package_name = meson.project_name()
package_string = '@0@ @1@'.format(meson.project_name(), devhelp_version)
package_tarname = devhelp_name
package_url = 'https://wiki.gnome.org/Apps/Devhelp'
package_version = devhelp_version

cc = meson.get_compiler('c')

config_h = configuration_data()

# defines
set_defines = [
  # package
  ['PACKAGE', package],
  ['PACKAGE_TARNAME', package_tarname],
  ['PACKAGE_URL', package_url],
  ['PACKAGE_VERSION', package_version],
  # i18n
  ['GETTEXT_PACKAGE', devhelp_name]
]

foreach define: set_defines
  config_h.set_quoted(define[0], define[1])
endforeach

# compiler flags
common_flags = []

if get_option('buildtype').contains('debug')
  test_cflags = [
    '-fno-strict-aliasing',
    '-Wcast-align',
    '-Wdeclaration-after-statement',
    '-Werror=unknown-warning-option',
    '-Wformat-nonliteral',
    '-Wformat=2',
    '-Winit-self',
    '-Winline',
    '-Wmissing-declarations',
    '-Wmissing-format-attribute',
    '-Wmissing-include-dirs',
    '-Wmissing-noreturn',
    '-Wmissing-prototypes',
    '-Wnested-externs',
    '-Wno-error=missing-field-initializers',
    '-Wno-error=unused-parameter',
    '-Wno-missing-field-initializers',
    '-Wno-suggest-attribute=format',
    '-Wno-unused-parameter',
    '-Wold-style-definition',
    '-Wpacked',
    '-Wpointer-arith',
    '-Wredundant-decls',
    '-Wshadow',
    '-Wstrict-prototypes',
    '-Wswitch-enum',
    '-Wundef',
    '-Wunused-but-set-variable',
    '-Wwrite-strings'
  ]

  common_flags += cc.get_supported_arguments(test_cflags)
endif

add_project_arguments(common_flags, language: 'c')

ldflag = '-Wl,--version-script'
have_version_script = host_machine.system().contains('linux') and cc.has_argument(ldflag)

gio_req_version = '>= 2.38'
gtk_req_version = '>= 3.22'
webkit2gtk_req_version = '>= 2.6'

devhelp_deps = [
  dependency('gio-2.0', version: gio_req_version),
  dependency('gsettings-desktop-schemas'),
  dependency('gtk+-3.0', version: gtk_req_version),
  dependency('webkit2gtk-4.0', version: webkit2gtk_req_version),
  cc.find_library('m')
]

gnome = import('gnome')
i18n = import('i18n')
pkg = import('pkgconfig')

po_dir = join_paths(meson.source_root(), 'po')

top_inc = include_directories('.')

subdir('po')
subdir('src')
subdir('data')

subdir('misc/gedit-plugin')

enable_gtk_doc = get_option('gtk_doc')
if enable_gtk_doc
  subdir('docs/reference')
endif

configure_file(
  output: 'config.h',
  configuration: config_h
)

meson.add_install_script(
  'meson_post_install.py',
  devhelp_datadir
)

# Print a summary of the configuration
output = 'Configuration:\n\n'
output += '        ' + meson.project_name() +  ' version ' + devhelp_version + '\n\n'
output += '        Source code location:  ' + meson.source_root() + '\n'
output += '        Prefix:                ' + devhelp_prefix + '\n'
output += '        Compiler:              ' + cc.get_id() + '\n'
output += '        API documentation:     ' + enable_gtk_doc.to_string() + '\n'
output += '        GObject introspection: ' + enable_introspection.to_string()
message(output)
